---
import { Image } from 'astro:assets';
import Button from '../button/Button.astro';
import type { CollectionEntry } from 'astro:content';
import FormattedDate from '../../FormattedDate.astro';
import { calculateReadingTimeFromMarkdown } from '../../../lib/reading';
import { slugifyTag as slugify } from '../../../lib/slug';

interface Props { post: CollectionEntry<'blog'> }
const { post } = Astro.props as Props;
// Estimate reading time from raw body (Markdown/MDX)
let readingTimeMin = 0;
try {
  // @ts-ignore - body may not exist until rendered; fallback to data.description
  const md = (post as any).body ?? '';
  readingTimeMin = calculateReadingTimeFromMarkdown(md || post.data.description || '');
} catch {}
---

<article class="card-surface p-4 h-full flex flex-col gap-3 relative">
  {post.data.heroImage && (
    <Image width={640} height={360} src={post.data.heroImage} alt={post.data.title} />
  )}
  <h3 class="text-xl font-semibold text-[color:var(--color-text-primary)]">{post.data.title}</h3>
  <p class="text-[color:var(--color-text-muted)]">{post.data.description}</p>
  
  <div class="mt-2 text-md relative z-2 justify-center">
    <Button  size="sm" href={post.data.urlRepo} class="flex items-center gap-1"> View Repo <class>
      </class> <svg viewBox="0 0 24 24" width="24" height="24" aria-hidden="true" class="transition-colors group-hover:text-[color:var(--accent)]">
      <path fill="currentColor" 
      d="M12 .5C5.65.5.5 5.65.5 12c0 5.1 3.29 9.41 7.86 10.94.58.11.79-.25.79-.56v-2.03c-3.2.69-3.87-1.37-3.87-1.37-.53-1.36-1.3-1.72-1.3-1.72-1.06-.72.08-.71.08-.71 1.17.08 1.78 1.21 1.78 1.21 1.04 1.78 2.73 1.27 3.4.97.11-.75.41-1.27.74-1.56-2.55-.29-5.23-1.28-5.23-5.72 0-1.27.45-2.31 1.19-3.13-.12-.29-.52-1.46.11-3.05 0 0 .97-.31 3.18 1.19.92-.26 1.9-.39 2.88-.39.98 0 1.96.13 2.88.39 2.21-1.5 3.18-1.19 3.18-1.19.63 1.59.23 2.76.11 3.05.74.82 1.19 1.86 1.19 3.13 0 4.45-2.68 5.43-5.24 5.72.42.36.79 1.08.79 2.18v3.24c0 .31.21.67.8.56A11.51 11.51 0 0 0 23.5 12c0-6.35-5.15-11.5-11.5-11.5Z"/></svg> 
        
    </Button>
  </div>
  <div class="flex flex-col text-sm text-[color:var(--color-text-muted)] gap-1">
    <div class="flex items-center gap-1 py-2">
      {post.data.tags && post.data.tags.length > 0 && (
        <div class="flex gap-2 flex-wrap">
          {post.data.tags.map((t) => <span class="sw-tag interactive-link no-underline  transition-all hover:scale-105 border border-transparent hover:border-[color:var(--accent)] transition-colors duration-200 ">{t}</span>)}
    </div>
        )}
  <a href={`/blog/${post.id}/`} class="stretched-link" aria-label={post.data.title}></a>
  
</article>





